// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyPostgresApp.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyPostgresApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241020145803_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AttachmentFile", b =>
                {
                    b.Property<string>("FileId")
                        .HasColumnType("text")
                        .HasColumnName("file_id");

                    b.Property<string>("ChannelId")
                        .HasColumnType("text")
                        .HasColumnName("channel_id");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("content");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extension");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("GuildId")
                        .HasColumnType("text")
                        .HasColumnName("guild_id");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("FileId");

                    b.ToTable("attachment_files", (string)null);
                });

            modelBuilder.Entity("Discriminator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("nickname");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Nickname", "Value")
                        .IsUnique();

                    b.ToTable("discriminators", (string)null);
                });

            modelBuilder.Entity("EmojiFile", b =>
                {
                    b.Property<string>("FileId")
                        .HasColumnType("text")
                        .HasColumnName("file_id");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("content");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extension");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("GuildId")
                        .HasColumnType("text")
                        .HasColumnName("guild_id");

                    b.HasKey("FileId");

                    b.ToTable("emoji_files", (string)null);
                });

            modelBuilder.Entity("GuildFile", b =>
                {
                    b.Property<string>("FileId")
                        .HasColumnType("text")
                        .HasColumnName("file_id");

                    b.Property<string>("ChannelId")
                        .HasColumnType("text")
                        .HasColumnName("channel_id");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("content");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extension");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("GuildId")
                        .HasColumnType("text")
                        .HasColumnName("guild_id");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("FileId");

                    b.ToTable("guilds_files", (string)null);
                });

            modelBuilder.Entity("MyPostgresApp.Models.Channel", b =>
                {
                    b.Property<string>("ChannelId")
                        .HasColumnType("text")
                        .HasColumnName("channel_id");

                    b.Property<string>("ChannelDescription")
                        .HasColumnType("text")
                        .HasColumnName("channel_description");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("channel_name");

                    b.Property<string>("GuildId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guild_id");

                    b.Property<bool>("IsTextChannel")
                        .HasColumnType("boolean")
                        .HasColumnName("is_text_channel");

                    b.Property<DateTime?>("LastReadDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_read_datetime");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("ChannelId");

                    b.HasIndex("GuildId");

                    b.ToTable("channels", (string)null);
                });

            modelBuilder.Entity("MyPostgresApp.Models.Friend", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("FriendId")
                        .HasColumnType("text")
                        .HasColumnName("friend_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.HasKey("UserId", "FriendId");

                    b.ToTable("friends", (string)null);
                });

            modelBuilder.Entity("MyPostgresApp.Models.Guild", b =>
                {
                    b.Property<string>("GuildId")
                        .HasColumnType("text")
                        .HasColumnName("guild_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("GuildName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guild_name");

                    b.Property<bool>("IsGuildUploadedImg")
                        .HasColumnType("boolean")
                        .HasColumnName("is_guild_uploaded_img");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.Property<string>("Region")
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.Property<string>("RootChannel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("root_channel");

                    b.Property<string>("Settings")
                        .HasColumnType("text")
                        .HasColumnName("settings");

                    b.HasKey("GuildId");

                    b.ToTable("guilds");
                });

            modelBuilder.Entity("MyPostgresApp.Models.GuildPermissions", b =>
                {
                    b.Property<string>("GuildId")
                        .HasColumnType("text")
                        .HasColumnName("guild_id");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<int>("AddReaction")
                        .HasColumnType("integer");

                    b.Property<int>("BanMembers")
                        .HasColumnType("integer");

                    b.Property<int>("CanInvite")
                        .HasColumnType("integer");

                    b.Property<int>("IsAdmin")
                        .HasColumnType("integer");

                    b.Property<int>("KickMembers")
                        .HasColumnType("integer");

                    b.Property<int>("ManageChannels")
                        .HasColumnType("integer");

                    b.Property<int>("ManageRoles")
                        .HasColumnType("integer");

                    b.Property<int>("MentionEveryone")
                        .HasColumnType("integer");

                    b.Property<int>("ReadMessages")
                        .HasColumnType("integer");

                    b.Property<int>("SendMessages")
                        .HasColumnType("integer");

                    b.HasKey("GuildId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("guild_permissions", (string)null);
                });

            modelBuilder.Entity("MyPostgresApp.Models.GuildUser", b =>
                {
                    b.Property<string>("GuildId")
                        .HasColumnType("text")
                        .HasColumnName("guild_id")
                        .HasColumnOrder(1);

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.HasKey("GuildId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("guild_users", (string)null);
                });

            modelBuilder.Entity("MyPostgresApp.Models.Message", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("text")
                        .HasColumnName("message_id");

                    b.Property<string>("AttachmentUrls")
                        .HasColumnType("text")
                        .HasColumnName("attachment_urls");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("channel_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("LastEdited")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_edited");

                    b.Property<string>("ReactionEmojisIds")
                        .HasColumnType("text")
                        .HasColumnName("reaction_emojis_ids");

                    b.Property<string>("ReplyToId")
                        .HasColumnType("text")
                        .HasColumnName("reply_to_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("MessageId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("MyPostgresApp.Models.TypingStatus", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("GuildId")
                        .HasColumnType("text");

                    b.Property<string>("ChannelId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "GuildId", "ChannelId");

                    b.ToTable("typing_statuses", (string)null);
                });

            modelBuilder.Entity("MyPostgresApp.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<int>("Bot")
                        .HasColumnType("integer")
                        .HasColumnName("bot");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("discriminator");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("email");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("language");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("Location")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("location");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("nickname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_number");

                    b.Property<JsonElement?>("Preferences")
                        .HasColumnType("jsonb")
                        .HasColumnName("preferences");

                    b.Property<string>("SocialMediaLinks")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("social_media_links");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("status");

                    b.Property<int>("Verified")
                        .HasColumnType("integer")
                        .HasColumnName("verified");

                    b.HasKey("UserId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MyPostgresApp.Models.UserChannel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("ChannelId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastReadDatetime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "ChannelId");

                    b.HasIndex("ChannelId");

                    b.ToTable("user_channels", (string)null);
                });

            modelBuilder.Entity("MyPostgresApp.Models.UserDm", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id")
                        .HasColumnOrder(0);

                    b.Property<string>("FriendId")
                        .HasColumnType("text")
                        .HasColumnName("friend_id")
                        .HasColumnOrder(1);

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("user_dms", (string)null);
                });

            modelBuilder.Entity("ProfileFile", b =>
                {
                    b.Property<string>("FileId")
                        .HasColumnType("text")
                        .HasColumnName("file_id");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("content");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extension");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("GuildId")
                        .HasColumnType("text")
                        .HasColumnName("guild_id");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("FileId");

                    b.ToTable("profile_files", (string)null);
                });

            modelBuilder.Entity("MyPostgresApp.Models.Channel", b =>
                {
                    b.HasOne("MyPostgresApp.Models.Guild", "Guild")
                        .WithMany("Channels")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("MyPostgresApp.Models.GuildPermissions", b =>
                {
                    b.HasOne("MyPostgresApp.Models.Guild", "Guild")
                        .WithMany("GuildPermissions")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyPostgresApp.Models.User", "User")
                        .WithMany("GuildPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyPostgresApp.Models.GuildUser", b =>
                {
                    b.HasOne("MyPostgresApp.Models.Guild", "Guild")
                        .WithMany("GuildUsers")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyPostgresApp.Models.User", "User")
                        .WithMany("GuildUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyPostgresApp.Models.UserChannel", b =>
                {
                    b.HasOne("MyPostgresApp.Models.Channel", "Channel")
                        .WithMany("UserChannels")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyPostgresApp.Models.User", "User")
                        .WithMany("UserChannels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyPostgresApp.Models.UserDm", b =>
                {
                    b.HasOne("MyPostgresApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyPostgresApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyPostgresApp.Models.Channel", b =>
                {
                    b.Navigation("UserChannels");
                });

            modelBuilder.Entity("MyPostgresApp.Models.Guild", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("GuildPermissions");

                    b.Navigation("GuildUsers");
                });

            modelBuilder.Entity("MyPostgresApp.Models.User", b =>
                {
                    b.Navigation("GuildPermissions");

                    b.Navigation("GuildUsers");

                    b.Navigation("UserChannels");
                });
#pragma warning restore 612, 618
        }
    }
}
